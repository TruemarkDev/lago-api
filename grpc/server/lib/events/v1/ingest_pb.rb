# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: events/v1/ingest.proto

require 'google/protobuf'

require 'google/protobuf/empty_pb'


descriptor_data = "\n\x16\x65vents/v1/ingest.proto\x12\tevents.v1\x1a\x1bgoogle/protobuf/empty.proto\"\xcb\x01\n\x05\x45vent\x12\x16\n\x0etransaction_id\x18\x01 \x01(\t\x12 \n\x18\x65xternal_subscription_id\x18\x03 \x01(\t\x12\x0c\n\x04\x63ode\x18\x04 \x01(\t\x12\x11\n\ttimestamp\x18\x05 \x01(\x05\x12\x34\n\nproperties\x18\x06 \x03(\x0b\x32 .events.v1.Event.PropertiesEntry\x1a\x31\n\x0fPropertiesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x32I\n\x0fIngestorService\x12\x36\n\x06Record\x12\x10.events.v1.Event\x1a\x16.google.protobuf.Empty\"\x00(\x01\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Events
  module V1
    Event = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("events.v1.Event").msgclass
  end
end
